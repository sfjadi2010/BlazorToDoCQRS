@page "/create"

@rendermode InteractiveServer

@using BlazorToDoCQRS.Commands
@using FluentValidation

@inject NavigationManager NavManager
@inject MediatR.IMediator Mediator

<h3>Create To-Do Item</h3>

<div class="row mb-3">
    <label asp-for="Title" class="col-sm-2 col-form-label">Title</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" @bind="Title" />
    </div>
</div>

<div class="row mb-3">
    <label asp-for="Description" class="col-sm-2 col-form-label">Description</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" @bind="Description" />
    </div>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<button class="btn btn-primary" @onclick="CreateToDo">Create</button>
<button class="btn btn-secondary" @onclick="Cancel">Cancel  </button>

@code {
    private string Title { get; set; } = default!;
    private string? Description { get; set; }
    private string? ErrorMessage { get; set; }

    private async Task CreateToDo()
    {
        try
        {
            await Mediator.Send(new CreateToDoItemCommand
            {
                Title = Title,
                Description = Description
            });

            NavManager.NavigateTo("/");
        }
        catch (ValidationException ex)
        {
            ErrorMessage = string.Join("; ", ex.Errors.Select(e => e.ErrorMessage));
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/");
    }
}